---
AWSTemplateFormatVersion: 2010-09-09
Description: Provides nesting for required stacks to deploy a full sample web application
  with reverse proxy, ELBs, IAM, and other resources (for demonstration/POC/testing)
  QS(5018)
Metadata:
  Stack:
    Value: 3
  VersionDate:
    Value: 20160510
  Identifier:
    Value: template-application
  Input:
    Description: VPC, SubnetIDs, S3 bucket names, CIDR blocks, KeyNames, AMIs, DB
      name and password
  Output:
    Description: Outputs ID of all deployed resources
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network (existing VPC config)
      Parameters:
      - pProductionCIDR
      - pProductionVPC
      - pAppPrivateSubnetA
      - pAppPrivateSubnetB
      - pAppPrivateSubnetC
      - pDBPrivateSubnetA
      - pDBPrivateSubnetB
    - Label:
        default: Application Configuration
      Parameters:
      - pAppInstanceType
      - pAppAmi
    - Label:
        default: Database Configuration
      Parameters:
      - pDBName
      - pDBUser
      - pDBPassword
      - pDBClass
      - pDBAllocatedStorage
    - Label:
        default: AWS Quick Start Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
Parameters:
        #pSecurityAlarmTopic:
        #  Description: SNS topic for alarms and notifications
        #  Type: String
        #  Default: ''
  InternetSubnets:
    Type: String
    Description: A comma delimited list of subnet IDs to deploy each interface endpoint into, e.g. subnetId1,subnetId2,subnetId3
  InternetPublicSubnets:
    Type: String
    Description: A comma delimited list of subnet IDs to deploy each interface endpoint into, e.g. subnetId1,subnetId2,subnetId3
  InternetVPCId:
    Description: Internet VPC Id
    Type: String
  pProductionCIDR:
    Description: Production VPC CIDR
    Type: String
  pProductionVPC:
    Description: Production VPC
    Type: AWS::EC2::VPC::Id
  pAppPrivateSubnetA:
    Description: WebApp Subnet A
    Type: AWS::EC2::Subnet::Id
  pAppPrivateSubnetB:
    Description: WebApp Subnet A
    Type: AWS::EC2::Subnet::Id
  pAppPrivateSubnetC:
    Description: WebApp Subnet C
    Type: AWS::EC2::Subnet::Id
  pAppInstanceType:
    Description: Instance type for the app webservers
    Type: String
  pDBPrivateSubnetA:
    Description: rDBPrivateSubnetA
    Type: AWS::EC2::Subnet::Id
  pDBPrivateSubnetB:
    Description: rDBPrivateSubnetB
    Type: AWS::EC2::Subnet::Id
  pWebServerAMI:
    Description: Which Web AMI do you want to use?
    Type: String
    Default: none
  pAppAmi:
    Description: Which App AMI do you want to use?
    Type: String
    Default: none
  pDBName:
    Description: Name of RDS Database
    Type: String
  pDBUser:
    Description: Username of DB Instance
    Type: String
  pDBPassword:
    Description: Password of DB Instance
    NoEcho: true
    Type: String
  pDBClass:
    Description: Instance class of RDS instance
    Type: String
  pDBAllocatedStorage:
    Description: Allocated Storage (in GB) for RDS instance
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, periods (.), and hyphens (-). It cannot start or
      end with a hyphen (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-compliance-uk-official/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  QSS3BucketRegion:
    Description: Region for asset bucket
    Type: String
  proxyServer:
    Description: Proxy Server for outbound access
    Type: String
Mappings:
  elbMap:
    ap-northeast-1:
      ELB: '582318560864'
    ap-northeast-2:
      ELB: '600734575887'
    ap-south-1:
      ELB: '718504428378'
    ap-southeast-1:
      ELB: '114774131450'
    ap-southeast-2:
      ELB: '783225319266'
    ca-central-1:
      ELB: '985666609251'
    eu-central-1:
      ELB: '054676820928'
    eu-west-1:
      ELB: '156460612806'
    eu-west-2:
      ELB: '652711504416'
    sa-east-1:
      ELB: '507241528517'
    us-east-1:
      ELB: '127311923021'
    us-east-2:
      ELB: '033677994240'
    us-gov-west-1:
      ELB: '048591011584'
    us-west-1:
      ELB: '027434742980'
    us-west-2:
      ELB: '797873946194'
Conditions:
  UsingDefaultBucket: !Equals
    - !Ref QSS3BucketName
    - 'aws-quickstart'
Resources:
  rSecurityGroupAppInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appserver Instances
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref pProductionCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3128
        ToPort: 3128
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: !Ref pProductionCIDR
      Tags:
      - Key: Name
        Value: sg-app-server-elb-instances
  rSecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Port 3306 database for access
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref rSecurityGroupAppInstance
      Tags:
      - Key: Name
        Value: sg-database-access
  rDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: MySQL RDS Subnet Group
      SubnetIds:
      - !Ref pDBPrivateSubnetA
      - !Ref pDBPrivateSubnetB
  rRDSInstanceMySQL:
    Type: AWS::RDS::DBInstance
    DependsOn:
    - rDBSubnetGroup
    - rSecurityGroupRDS
    Properties:
      DBName: !Ref pDBName
      Engine: MySQL
      MultiAZ: true
      StorageEncrypted: true
      MasterUsername: !Ref pDBUser
      MasterUserPassword: !Ref pDBPassword
      DBInstanceClass: !Ref pDBClass
      AllocatedStorage: !Ref pDBAllocatedStorage
      VPCSecurityGroups:
      - !Ref rSecurityGroupRDS
      DBSubnetGroupName: !Ref rDBSubnetGroup
  rAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns: 
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies:
      - PolicyName: S3Assets
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: DescribeVolumes
            Effect: Allow
            Action:
            - ec2:DescribeVolumes
            Resource: '*'
  rAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref rAppInstanceRole
  rAutoScalingConfigApp:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
    - rRDSInstanceMySQL
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
          - install_cfn
          - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.rAutoScalingConfigApp.Metadata.AWS::CloudFormation::Init
                action=HTTPS_PROXY=wordpress_install /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingGroupApp --configsets wordpress_install --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              php: []
              php-mysql: []
              mariadb: []
              httpd: []
          sources:
            /var/www/html: https://wordpress.org/latest.tar.gz
          files:
            /var/www/html/wordpress/wp-config.php:
              content: !Sub |
                <?php
                define('DB_NAME', '${pDBName}');
                define('DB_USER', '${pDBUser}');
                define('DB_PASSWORD', '${pDBPassword}');
                define('DB_HOST', '${rRDSInstanceMySQL.Endpoint.Address}');
                define('FORCE_SSL_ADMIN', true);
                if (strpos($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false) { $_SERVER['HTTPS']='on'; }
                define('DB_CHARSET', 'utf8');
                define('DB_COLLATE', '');

                $table_prefix = 'wp_';
                define('WP_DEBUG', false);

                if ( !defined('ABSPATH') )
                  define('ABSPATH', dirname(__FILE__) . '/');

                require_once(ABSPATH . 'wp-settings.php');
              mode: '000644'
              owner: root
              cgroup: root
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !Ref pAppAmi
      IamInstanceProfile: !Ref rAppInstanceProfile
      InstanceType: !Ref pAppInstanceType
      BlockDeviceMappings:
      - DeviceName: /dev/sdh
        Ebs:
          VolumeSize: 50
          VolumeType: gp2
          Encrypted: true
      SecurityGroups:
      - !Ref rSecurityGroupAppInstance
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash -x

            export http_proxy=http://${proxyServer}:3128
            export https_proxy=http://${proxyServer}:3128
            export no_proxy=instance-data,169.254.169.254,ec2.eu-west-2.amazonaws.com
            echo "https_proxy=http://${proxyServer}:3128" >> /etc/wgetrc
            echo "http_proxy=http://${proxyServer}:3128" >> /etc/wgetrc
            echo "http_proxy=http://${proxyServer}:3128" >> /etc/environment
            echo "no_proxy=instance-data,169.254.169.254" >> /etc/environment
            echo "proxy=http://${proxyServer}:3128,ec2.eu-west-2.amazonaws.com " >> /etc/yum.conf

            #amazon-linux-extras enable php7.3
            yum update -y

            EC2_INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)

            ######################################################################
            # Volume /dev/sdh (which will get created as /dev/xvdh on Amazon Linux)

            DATA_STATE="unknown"
            until [ "${!DATA_STATE}" == "attached" ]; do
              DATA_STATE=$(aws ec2 describe-volumes \
              --region ${AWS::Region} \
              --filters \
                    Name=attachment.instance-id,Values=${!EC2_INSTANCE_ID} \
                    Name=attachment.device,Values=/dev/sdh \
              --query Volumes[].Attachments[].State \
              --output text)

              sleep 5
            done

            # Format /dev/xvdh if it does not contain a partition yet
            if [ "$(file -b -s /dev/xvdh)" == "data" ]; then
              mkfs -t ext4 /dev/xvdh
            fi

            mkdir -p /data
            mount /dev/xvdh /data

            # Persist the volume in /etc/fstab so it gets mounted again
            echo '/dev/xvdh /data ext4 defaults,nofail 0 2' >> /etc/fstab

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingConfigApp --configsets wordpress_install --region ${AWS::Region}

            ######################################################################
            #     NOTE: UPDATE THESE VALUES ACCORDING TO THE COMPLIANCE BODY     #
            ######################################################################
            LANDING_PAGE="/var/www/html/index.html"
            COMPLIANCE_BODY_LABEL="UK Official"
            COMPLIANCE_SURVEY_LINK="uk-offical"
            COMPLIANCE_MATRIX_FILENAME="Cloud-Security-Principles-UK-Controls-Mapping.xlsx"
            ######################################################################

            # Download the landing page.
            sudo wget https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/assets/landing/landing.html -O $LANDING_PAGE

            # Replace relative image links with links to the production S3 source.
            sudo sed -i 's|images|https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/assets/landing/images|g' $LANDING_PAGE

            # Inject the landing page branding label.
            sudo sed -i "s|{compliance-body}|$COMPLIANCE_BODY_LABEL|g" $LANDING_PAGE

            # Inject the survey link parameter.
            sudo sed -i "s|{compliance-body-survey-link}|$COMPLIANCE_SURVEY_LINK|g" $LANDING_PAGE

            # Inject the security control matrix file location.
            sudo sed -i "s|{compliance-body-matrix}|https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/assets/$COMPLIANCE_MATRIX_FILENAME|g" $LANDING_PAGE

            # Upgrade PHP
            amazon-linux-extras enable php7.3
            yum update -y php
            service httpd restart
          - S3BucketName: !If
              - UsingDefaultBucket
              - !Sub 'aws-quickstart-${AWS::Region}'
              - !Ref 'QSS3BucketName'
            S3BucketRegion: !If
              - UsingDefaultBucket
              - !Ref 'AWS::Region'
              - !Ref 'QSS3BucketRegion'

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Subnets:
        - !Ref pAppPrivateSubnetA
        - !Ref pAppPrivateSubnetB
        - !Ref pAppPrivateSubnetC
      Type: 'network'

  NLBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LBTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: TCP

  LBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Description: |
      Target group for the LoadBalancer. Note that the Envoy autoscaling group sets its
      TargetGroupARN field to this target group, ensuring Envoy instances are registered
      with the target group
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      Port: 80
      Protocol: TCP
      UnhealthyThresholdCount: 3
      VpcId: !Ref pProductionVPC

  rAutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigApp
    Properties:
      VPCZoneIdentifier:
      - !Ref pAppPrivateSubnetA
      - !Ref pAppPrivateSubnetB
      - !Ref pAppPrivateSubnetC
      LaunchConfigurationName: !Ref rAutoScalingConfigApp
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
        - !Ref LBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: AppServer
        PropagateAtLaunch: true
  rAutoScalingDownApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: '1'
      ScalingAdjustment: 1
  rAutoScalingUpApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: '1'
      ScalingAdjustment: -1
  rCWAlarmHighCPUApp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 50
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: 60
      AlarmActions:
      - !Ref rAutoScalingDownApp
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref rAutoScalingGroupApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: AppServerCpuHighUtilization
  rCWAlarmLowCPUApp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 10
      AlarmDescription: Alarm if CPU too low, remove an app server
      Period: 60
      AlarmActions:
      - !Ref rAutoScalingUpApp
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref rAutoScalingGroupApp
      ComparisonOperator: LessThanThreshold
      MetricName: AppServerCpuLowUtilization

  SampleApplicationEndpointService:
    DependsOn:
    - LoadBalancer
    Type: "AWS::EC2::VPCEndpointService"
    Properties:
      NetworkLoadBalancerArns:
        - !Ref LoadBalancer
      AcceptanceRequired: false

  SampleApplicationEndpoint:
    DependsOn:
    - SampleApplicationEndpointService
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref InternetVPCId
      ServiceName: !Sub 'com.amazonaws.vpce.${AWS::Region}.${SampleApplicationEndpointService}'
      VpcEndpointType: Interface
      PrivateDnsEnabled: false
      SubnetIds: !Split [ ',', !Ref InternetSubnets ]
      SecurityGroupIds:
        - !Ref InterfaceEndpointsSecurityGroup

  InterfaceEndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Internet access to Sample App
      VpcId: !Ref InternetVPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: sg-internet-accees

  GetVpcEndpointIpsLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3
          
          def handler(event, context):
              print(event)
              ec2client = boto3.client('ec2',region_name=event['ResourceProperties']['Region'])
          
              vpceid = event['ResourceProperties']['VPCendpointID']
          
              response = ec2client.describe_vpc_endpoints(VpcEndpointIds=[vpceid],MaxResults=100)
              enis = response['VpcEndpoints'][0]['NetworkInterfaceIds']
          
              i = 1
              ip = {}
              for eni in enis:
                  response = ec2client.describe_network_interfaces(NetworkInterfaceIds=[eni])
                  ip[i] = response['NetworkInterfaces'][0]['PrivateIpAddress']
                  i = i + 1
          
              responseData = {}
              responseData['VpceId'] = vpceid
              for ipnum, ipaddress in ip.items():
                  responseData['Ip' + str(ipnum)] = ipaddress
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, vpceid)
      Description: Custom Resource
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 10

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:*
              - Effect: Allow
                Action:
                  - ec2:Describe*
                Resource: '*'

  GetVpcEndpointIpsAppServerNLB:
    Type: Custom::GetVpcEndpointIps
    DependsOn:
      - SampleApplicationEndpoint
      - GetVpcEndpointIpsLambda
    Properties:
      ServiceToken: !GetAtt GetVpcEndpointIpsLambda.Arn
      Region: !Ref "AWS::Region"
      VPCendpointID: !Ref SampleApplicationEndpoint

  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets: !Split [ ',', !Ref InternetPublicSubnets ]
      SecurityGroups:
        - !Ref InterfaceEndpointsSecurityGroup

  ALBListener:
    DependsOn:
    - ALBTargetGroup
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: '80'
      Protocol: HTTP

  ALBTargetGroup:
    DependsOn:
    - GetVpcEndpointIpsLambda
    - SampleApplicationEndpoint
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref InternetVPCId
      Targets:
        -
          Id: !GetAtt GetVpcEndpointIpsAppServerNLB.Ip1
          Port: 80
        -
          Id: !GetAtt GetVpcEndpointIpsAppServerNLB.Ip2
          Port: 80
        -
          Id: !GetAtt GetVpcEndpointIpsAppServerNLB.Ip3
          Port: 80
      TargetType: ip

  PostProcessingLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns: # TODO get rid of managed policy
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: PostProcPermissions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: UploadServerCertificate
            Effect: Allow
            Action:
            - acm:ListCertificates
            - acm:ImportCertificate
            - acm:DescribeCertificate
            - acm:DeleteCertificate
            Resource:
            - '*'
          - Sid: CreateLoadBalancerListener
            Effect: Allow
            Action:
            - elasticloadbalancing:CreateListener
            - elasticloadbalancing:DeleteListener
            Resource:
            - '*'

  PostProcessingLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: !Sub |
          from subprocess import Popen,PIPE,STDOUT
          import boto3
          import os
          import time
          
          ALB_ARN = os.environ['LoadBalancer']
          TargetGroupArn = os.environ['TargetGroupArn']
          domainName = os.environ['DomainName']
          
          acm = boto3.client('acm')
          lb = boto3.client('elbv2')
          
          def create_self_signed_cert():
          
              out = Popen(["openssl", "req", "-x509", "-newkey", "rsa:2048", "-keyout", "/tmp/key.pem", "-out", "/tmp/cert.pem", "-subj", "/C=GB/ST=London/L=London/O=NonProductionTestCert/CN=" + domainName, "-days", "365", "-nodes" ], stderr=STDOUT,stdout=PIPE, cwd="/tmp/")
              print(out.communicate()[0])
          
          def createACMCert():
            cert = open('/tmp/cert.pem', "rb").read()
            key = open('/tmp/key.pem', "rb").read()
            response = acm.import_certificate(
              Certificate=cert,
              PrivateKey=key,
            )
            return response['CertificateArn']
            
          def checkIfCertExists():
            certList = acm.list_certificates(CertificateStatuses=['ISSUED'])
            for cert in certList['CertificateSummaryList']:
              if cert['DomainName'] == domainName:
                return cert
              return False
          
          def DeleteListener():
            try:
              for l in lb.describe_listeners(LoadBalancerArn=ALB_ARN)['Listeners']:
                if l['Port'] == 443:
                  lb.delete_listener(ListenerArn=l['ListenerArn'])
              return
            except:
              return
              
          def DeleteCert():
            cert = checkIfCertExists()
            try:
              acm.delete_certificate(CertificateArn=cert['CertificateArn'])
              return
            except:
              return

          def handler(event, context):
            responseData = {}
            print(event)
            import cfnresponse
            certDetails = checkIfCertExists()
            if event['RequestType'] == 'Create':
              try:
                if certDetails:
                  responseData['certArn'] = certDetails['CertificateArn']
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'createdSSL')
                else:
                  create_self_signed_cert()
                  certArn = createACMCert()
                  while checkIfCertExists() == None:
                    print('waiting for cert to become available...')
                    time.sleep(10)
                  responseData['certArn'] = certArn
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'createdSSL')
              except Exception as e:
                responseData['error'] = str(e)
                cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'upadtedbSSL')
            if event['RequestType'] == 'Update':
              responseData['certArn'] = certDetails['CertificateArn']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'id')
            if event['RequestType'] == 'Delete':
              DeleteListener()
              DeleteCert()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'id')
      Description: Post processing Lambda Function
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt PostProcessingLambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          Region: !Sub ${AWS::Region}
          LoadBalancer: !Sub ${ALB}
          TargetGroupArn: !Ref ALBTargetGroup
          DomainName: !GetAtt ALB.DNSName

  SetupSSL:
    Type: Custom::CreateSSL
    DependsOn:
      - PostProcessingLambda
      - ALB
      - ALBListener
    Properties:
      ServiceToken: !GetAtt PostProcessingLambda.Arn

  ALBHttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
      - CertificateArn: !GetAtt SetupSSL.certArn
      DefaultActions:
      - TargetGroupArn: !Ref ALBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS

Outputs:
  rSecurityGroupRDS:
    Value: !Ref rSecurityGroupRDS
  applicationUrl:
    Value: !Join ['', [ 'https://', !GetAtt ALB.DNSName ]]
  SurveyLink:
    Description: Please take a moment to complete the survey by clicking this link
    Value: https://aws.au1.qualtrics.com/SE/?SID=SV_55sYYdtY1NhTTgN&qs=${COMPLIANCE_SURVEY_LINK}
  Help:
    Description: For assistance or questions regarding this quickstart please email
      compliance-accelerator@amazon.com
    Value: ''

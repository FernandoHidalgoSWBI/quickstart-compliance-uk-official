AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VPCCidrBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: Supernet 
  MakePublic:
    Type: String
    Default: false
    Description: true to enable internet connectivity, false to disable internet connectivity
  AddNat:
    Type: String
    Default: false
    Description: true to enable nat connectivity, false to disable nat connectivity
  ProjectName:
    Type: String
    Default: VPC-demo
    Description: Project name that will be used to name and identify resoures that are created

Conditions: 
  MakePublicNatCond: !Or [ !Equals [ !Ref MakePublic, true ], !Equals [ !Ref AddNat, true ] ]
  AddNatCond: !Equals [ !Ref AddNat, true ]

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Condition: MakePublicNatCond
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VPCCidrBlock, 6, 8]]
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", a ] ]
      Tags:
        -
          Key: Name
          Value: !Join [ "", [ !Ref ProjectName, "-Public-", a ] ]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: MakePublicNatCond
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VPCCidrBlock, 6, 8]]
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", b ] ]
      Tags:
        -
          Key: Name
          Value: !Join [ "", [ !Ref ProjectName, "-Public-", b ] ]

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: MakePublicNatCond
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VPCCidrBlock, 6, 8]]
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", c ] ]
      Tags:
        -
          Key: Name
          Value: !Join [ "", [ !Ref ProjectName, "-Public-", c ] ]

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Cidr [!Ref VPCCidrBlock, 6, 8]]
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", a ] ]
      Tags:
        -
          Key: Name
          Value: !Join [ "", [ !Ref ProjectName, "-Private-", a ] ]

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [4, !Cidr [!Ref VPCCidrBlock, 6, 8]]
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", b ] ]
      Tags:
        -
          Key: Name
          Value: !Join [ "", [ !Ref ProjectName, "-Private-", b ] ]

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [5, !Cidr [!Ref VPCCidrBlock, 6, 8]]
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", c ] ]
      Tags:
        -
          Key: Name
          Value: !Join [ "", [ !Ref ProjectName, "-Private-", c ] ]

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Condition: MakePublicNatCond

  AttachIgwVpc:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Condition: MakePublicNatCond
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Condition: MakePublicNatCond
    Properties: 
      VpcId: !Ref VPC

  InternetRoute:
    Type: "AWS::EC2::Route"
    Condition: MakePublicNatCond
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: MakePublicNatCond
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: MakePublicNatCond
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetAssociationC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: MakePublicNatCond
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetAssociationC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

  NAT:
    Type: AWS::EC2::NatGateway
    Condition: AddNatCond
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: Internet VPC NAT

  EIP:
    Type: AWS::EC2::EIP
    Condition: AddNatCond
    Properties:
      Domain: vpc

  Route:
    Type: AWS::EC2::Route
    Condition: AddNatCond
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT

  VPCFlowLogRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal:
              Service:
                - "vpc-flow-logs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  VPCFlowLogPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          Resource:
          - arn:aws:logs:*:*:*
      PolicyName: VPCFlowLogPolicy
      Roles:
      - !Ref VPCFlowLogRole

  VPCFlowLog:
    Type: "AWS::EC2::FlowLog"
    Properties:
      DeliverLogsPermissionArn : !GetAtt VPCFlowLogRole.Arn
      LogGroupName : securityGroupVpcFlowLogs
      ResourceId : !Ref VPC
      ResourceType : VPC
      TrafficType : REJECT

Outputs:
  VPCId:
    Description: The VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"
  PublicSubnetAId:
    Description: The ID of Subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetAId"
    Condition: MakePublicNatCond
  PublicSubnetAIp:
    Description: The IP of Subnet A
    Value: !Select [0, !Cidr [!Ref VPCCidrBlock, 6, 8]]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetAIp"
    Condition: MakePublicNatCond
  PublicSubnetBId:
    Description: The ID of Subnet B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetBId"
    Condition: MakePublicNatCond
  PublicSubnetBIp:
    Description: The IP of Subnet B
    Value: !Select [1, !Cidr [!Ref VPCCidrBlock, 6, 8]]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetBIp"
    Condition: MakePublicNatCond
  PublicSubnetCId:
    Description: The ID of Subnet C
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetCId"
    Condition: MakePublicNatCond
  PublicSubnetCIp:
    Description: The IP of Subnet C
    Value: !Select [2, !Cidr [!Ref VPCCidrBlock, 6, 8]]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetCIp"
    Condition: MakePublicNatCond
  PrivateSubnetAId:
    Description: The ID of Subnet A
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetAId"
  PrivateSubnetAIp:
    Description: The IP of Subnet A
    Value: !Select [3, !Cidr [!Ref VPCCidrBlock, 6, 8]]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetAIp"
  PrivateSubnetBId:
    Description: The ID of Subnet B
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetBId"
  PrivateSubnetBIp:
    Description: The IP of Subnet B
    Value: !Select [4, !Cidr [!Ref VPCCidrBlock, 6, 8]]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetBIp"
  PrivateSubnetCId:
    Description: The ID of Subnet C
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetCId"
  PrivateSubnetCIp:
    Description: The IP of Subnet C
    Value: !Select [5, !Cidr [!Ref VPCCidrBlock, 6, 8]]
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetCIp"
  DefaultSecurityGroup:
    Description: The default subnet Id
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-DefaultSecurityGroup"
  PublicRouteTable:
    Description: The Private route table ID
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTable"
    Condition: MakePublicNatCond
  PrivateRouteTable:
    Description: The Private route table ID
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateRouteTable"
  StackName:
    Description: The name of the stack
    Value: !Sub "${AWS::StackName}"
  VPCCidrBlock:
    Description: The CIDR block assigned to the VPC
    Value: !Ref VPCCidrBlock
    Export:
      Name: !Sub "${AWS::StackName}-VPCCidrBlock"

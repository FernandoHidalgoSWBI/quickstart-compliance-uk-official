AWSTemplateFormatVersion: "2010-09-09"
Description: "Enable VPC flow logs on the default VPC"

Resources:
  AddDefaultVPCFlowLogsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import sys
          from os import environ

          ec2Client = boto3.client('ec2')
          
          def getVPC():
              client = boto3.client('ec2')
              vpcs = client.describe_vpcs()['Vpcs']
              for vpc in vpcs:
                  if vpc['IsDefault']:
                      return vpc['VpcId']
              return None

          def createLogGroup():
              logsClient = boto3.client('logs')
              logGroup = None
              logGroup = logsClient.describe_log_groups(logGroupNamePrefix='qs-flow-logs')
              print(logGroup['logGroups'])
              if logGroup['logGroups'] == []:
                  print('Creating log Group for default VPC logs')
                  logsClient.create_log_group( logGroupName = 'qs-flow-logs' )
              else:
                  print('Log group already exists')

          def configureFlowLogs(vpcId):
              if not chkstatus(vpcId):
                  createLogGroup()
                  response = ec2Client.create_flow_logs( ResourceIds = [ vpcId ],
                                                       ResourceType             = 'VPC',
                                                       TrafficType              = 'REJECT',
                                                       LogGroupName             = 'qs-flow-logs',
                                                       DeliverLogsPermissionArn = environ.get('FLOWLOG_ROLE_ARN')
                                                      )
                  return response
              else:
                  return
              
          def chkstatus(vpcId):
              response = ec2Client.describe_flow_logs(
                  Filters=[
                      {
                          'Name': 'resource-id',
                          'Values': [
                              vpcId
                          ]
                      },
                  ]
              )
              if response['FlowLogs'] == []:
                  return False
              else:
                  for FlowLog in response['FlowLogs']:
                      if FlowLog['LogGroupName'] == 'qs-flow-logs':
                          return FlowLog['FlowLogId']
                      else:
                          return None
          
          def removeFlowLogs(vpcId):
              flowLogStatus = chkstatus(vpcId)
              if flowLogStatus == None:
                  return
              elif flowLogStatus == False:
                  return
              else:
                  response = ec2Client.delete_flow_logs(
                      FlowLogIds=[
                          flowLogStatus
                      ]
                  )
          
          def lambda_handler(event, context):
              print(event)
              vpcId = getVPC()
              import cfnresponse as cfn
              rd = {}
              if vpcId == None:
                  cfn.send(event, context, cfn.SUCCESS, rd, 'flowLogs')
                  return
              if event['RequestType'] == 'Create':
                  try:
                      configureFlowLogs(vpcId)
                      cfn.send(event, context, cfn.SUCCESS, rd, 'flowLogs')
                  except Exception as e:
                      rd['error'] = e
                      cfn.send(event, context, cfn.FAILED, rd, 'flowLogs')
              elif event['RequestType'] == 'Update':
                  try:
                      configureFlowLogs(vpcId)
                      cfn.send(event, context, cfn.SUCCESS, rd, 'flowLogs')
                  except Exception as e:
                      rd['error'] = e
                      cfn.send(event, context, cfn.FAILED, rd, 'flowLogs')
              elif event['RequestType'] == 'Delete':
                  try:
                      removeFlowLogs(vpcId)
                      cfn.send(event, context, cfn.SUCCESS, rd, 'flowLogs')
                  except Exception as e:
                      rd['error'] = e
                      cfn.send(event, context, cfn.FAILED, rd, 'flowLogs')
              else:
                  cfn.send(event, context, cfn.FAILED, rd, 'flowLogs')
              return
      Description: Add Flow logs to default VPCs
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      MemorySize: 256
      Handler: index.lambda_handler
      Environment:
        Variables:
          FLOWLOG_ROLE_ARN: !GetAtt VPCFlowLogRole.Arn

  VPCFlowLogRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal:
              Service:
                - "vpc-flow-logs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  VPCFlowLogPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          Resource:
          - !Sub arn:${AWS::Partition}:logs:*:*:*
      PolicyName: VPCFlowLogPolicy
      Roles:
      - !Ref VPCFlowLogRole

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - ec2:DescribeFlowLogs
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:CreateFlowLogs
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DeleteFlowLogs
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                Resource: !Sub arn:${AWS::Partition}:logs:*:*:*
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:PassRole
                Resource: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/official-quickstart-default-vpc-flow-logs-role'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyWildcardResource: "This is the role used by a Lambda function enabling VPC flow logs on the default VPC. We do not know the resource details for the VPC before creating this role."


  AddDefaultVPCFlowLogs:
    Type: Custom::AddDefaultVPCFlowLogs
    DependsOn:
      - VPCFlowLogRole
    Properties:
      ServiceToken: !GetAtt AddDefaultVPCFlowLogsLambda.Arn
